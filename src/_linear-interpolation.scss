@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "strip-unit" as s;

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// @see https://gist.github.com/Jakobud/7414f91142e0f540f221a3e3cafdf856
/// @author Vasiliy Artamonov <artamonovvasya10@gmail.com>
///
/// Modified by Vasiliy Artamonov 06.09.2020
@function linear-interpolation($map) {
	$keys: map.keys($map);

	@if (list.length($keys) != 2) {
		@error "linear-interpolation() $map must be exactly 2 values";
	}

	$value-1: map.get($map, list.nth($keys, 1));
	$value-2: map.get($map, list.nth($keys, 2));
	$result: ();

	// The slope
	$slope: s.strip-unit(math.div($value-2 - $value-1, list.nth($keys, 2) - list.nth($keys,1)));

	// The y-intercept
	$intercept: $value-1 - $slope * list.nth($keys, 1);

	@return (
		slope: $slope,
		intercept: $intercept,
	);
}

@function linear-equation-to-calc($equation) {
	$slope: map.get($equation, slope);
	$intercept: map.get($equation, intercept);

	$calc: #{$slope*100}vw #{$intercept};
	$result: calc(#{$calc});

	@return $result;
}

